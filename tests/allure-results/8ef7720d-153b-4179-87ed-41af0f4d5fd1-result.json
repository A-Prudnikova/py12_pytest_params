{"name": "test_github_sign_in_desktop[browser_size0]", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '[href=\"/login\"')).click\n\nReason: ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=104.0.5112.81)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x007578B3+2193587]\n\tOrdinal0 [0x006F0681+1771137]\n\tOrdinal0 [0x00604070+802928]\n\tOrdinal0 [0x00633533+996659]\n\tOrdinal0 [0x00629223+954915]\n\tOrdinal0 [0x0064D7AC+1103788]\n\tOrdinal0 [0x00628C04+953348]\n\tOrdinal0 [0x0064D9C4+1104324]\n\tOrdinal0 [0x0065DAE2+1170146]\n\tOrdinal0 [0x0064D5C6+1103302]\n\tOrdinal0 [0x006277E0+948192]\n\tOrdinal0 [0x006286E6+952038]\n\tGetHandleVerifier [0x00A00CB2+2738370]\n\tGetHandleVerifier [0x009F21B8+2678216]\n\tGetHandleVerifier [0x007E17AA+512954]\n\tGetHandleVerifier [0x007E0856+509030]\n\tOrdinal0 [0x006F743B+1799227]\n\tOrdinal0 [0x006FBB68+1817448]\n\tOrdinal0 [0x006FBC55+1817685]\n\tOrdinal0 [0x00705230+1856048]\n\tBaseThreadInitThunk [0x769FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\n\nScreenshot: file://C:\\Users\\GameMax\\.selene\\screenshots\\1660646658408\\1660646658409.png\nPageSource: file://C:\\Users\\GameMax\\.selene\\screenshots\\1660646658408\\1660646658409.html", "trace": "self = <selene.core.wait.Wait object at 0x000002051758BBB0>\nfn = <selene.core.wait.Command object at 0x000002051758BB80>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x000002051758BB80>\nentity = <selene.core.entity.Element object at 0x000002051758A9E0>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000002051758A9E0>\n\n>   self.wait.command('click', lambda element: element().click())\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:464: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"9357df829b29d224276988db32deb9d7\", element=\"4052e860-0321-4987-b7cb-afe40a54994e\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"9357df829b29d224276988db32deb9d7\", element=\"4052e860-0321-4987-b7cb-afe40a54994e\")>\ncommand = 'clickElement'\nparams = {'id': '4052e860-0321-4987-b7cb-afe40a54994e', 'sessionId': '9357df829b29d224276988db32deb9d7'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:773: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9357df829b29d224276988db32deb9d7\")>\ndriver_command = 'clickElement'\nparams = {'id': '4052e860-0321-4987-b7cb-afe40a54994e'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002051758A3E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=104.0.5112.81)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x007578B3+2193587]\nE       \tOrdinal0 [0x006F0681+1771137]\nE       \tOrdinal0 [0x00604070+802928]\nE       \tOrdinal0 [0x00633533+996659]\nE       \tOrdinal0 [0x00629223+954915]\nE       \tOrdinal0 [0x0064D7AC+1103788]\nE       \tOrdinal0 [0x00628C04+953348]\nE       \tOrdinal0 [0x0064D9C4+1104324]\nE       \tOrdinal0 [0x0065DAE2+1170146]\nE       \tOrdinal0 [0x0064D5C6+1103302]\nE       \tOrdinal0 [0x006277E0+948192]\nE       \tOrdinal0 [0x006286E6+952038]\nE       \tGetHandleVerifier [0x00A00CB2+2738370]\nE       \tGetHandleVerifier [0x009F21B8+2678216]\nE       \tGetHandleVerifier [0x007E17AA+512954]\nE       \tGetHandleVerifier [0x007E0856+509030]\nE       \tOrdinal0 [0x006F743B+1799227]\nE       \tOrdinal0 [0x006FBB68+1817448]\nE       \tOrdinal0 [0x006FBC55+1817685]\nE       \tOrdinal0 [0x00705230+1856048]\nE       \tBaseThreadInitThunk [0x769FFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_github_sign_in_desktop():\n        if browser._config.window_width < 1012:\n            pytest.skip('Size for mobile version')\n    \n>       s(desktop_locator).click()\n\ntest_skip.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:464: in click\n    self.wait.command('click', lambda element: element().click())\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:136: in command\n    self.for_(Command(description, fn))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Wait object at 0x000002051758BBB0>\nfn = <selene.core.wait.Command object at 0x000002051758BB80>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 4s, while waiting for:\nE                       browser.element(('css selector', '[href=\"/login\"')).click\nE                       \nE                       Reason: ElementNotInteractableException: Message: element not interactable\nE                         (Session info: chrome=104.0.5112.81)\nE                       Stacktrace:\nE                       Backtrace:\nE                       \tOrdinal0 [0x007578B3+2193587]\nE                       \tOrdinal0 [0x006F0681+1771137]\nE                       \tOrdinal0 [0x00604070+802928]\nE                       \tOrdinal0 [0x00633533+996659]\nE                       \tOrdinal0 [0x00629223+954915]\nE                       \tOrdinal0 [0x0064D7AC+1103788]\nE                       \tOrdinal0 [0x00628C04+953348]\nE                       \tOrdinal0 [0x0064D9C4+1104324]\nE                       \tOrdinal0 [0x0065DAE2+1170146]\nE                       \tOrdinal0 [0x0064D5C6+1103302]\nE                       \tOrdinal0 [0x006277E0+948192]\nE                       \tOrdinal0 [0x006286E6+952038]\nE                       \tGetHandleVerifier [0x00A00CB2+2738370]\nE                       \tGetHandleVerifier [0x009F21B8+2678216]\nE                       \tGetHandleVerifier [0x007E17AA+512954]\nE                       \tGetHandleVerifier [0x007E0856+509030]\nE                       \tOrdinal0 [0x006F743B+1799227]\nE                       \tOrdinal0 [0x006FBB68+1817448]\nE                       \tOrdinal0 [0x006FBC55+1817685]\nE                       \tOrdinal0 [0x00705230+1856048]\nE                       \tBaseThreadInitThunk [0x769FFA29+25]\nE                       \tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\nE                       \tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\nE                       \nE                       Screenshot: file://C:\\Users\\GameMax\\.selene\\screenshots\\1660646658408\\1660646658409.png\nE                       PageSource: file://C:\\Users\\GameMax\\.selene\\screenshots\\1660646658408\\1660646658409.html\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:125: TimeoutException"}, "attachments": [{"name": "log", "source": "bfebaecd-d7fe-489a-86b5-b0d14c17a717-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "a755d72a-cba4-4ea3-9888-a84428a6a611-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "f0bc34a5-c08b-4861-a399-c952658b038c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser_size", "value": "(1012, 946)"}], "start": 1660646665699, "stop": 1660646670080, "uuid": "a49b9155-fa6a-4172-889a-52f04b39f6dc", "historyId": "00b58b24b04774b270745e9df3bfce6e", "testCaseId": "996b9b511717b3cfdcfe387996553585", "fullName": "tests.test_skip#test_github_sign_in_desktop", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_skip"}, {"name": "host", "value": "DESKTOP-RDDJORK"}, {"name": "thread", "value": "4372-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_skip"}]}