{"name": "test_github_sign_in", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '[text=\"Sign in\"]')).click\n\nReason: NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[text=\"Sign in\"]\"}\n  (Session info: chrome=104.0.5112.79)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00CD78B3+2193587]\n\tOrdinal0 [0x00C70681+1771137]\n\tOrdinal0 [0x00B841A8+803240]\n\tOrdinal0 [0x00BB24A0+992416]\n\tOrdinal0 [0x00BB273B+993083]\n\tOrdinal0 [0x00BDF7C2+1177538]\n\tOrdinal0 [0x00BCD7F4+1103860]\n\tOrdinal0 [0x00BDDAE2+1170146]\n\tOrdinal0 [0x00BCD5C6+1103302]\n\tOrdinal0 [0x00BA77E0+948192]\n\tOrdinal0 [0x00BA86E6+952038]\n\tGetHandleVerifier [0x00F80CB2+2738370]\n\tGetHandleVerifier [0x00F721B8+2678216]\n\tGetHandleVerifier [0x00D617AA+512954]\n\tGetHandleVerifier [0x00D60856+509030]\n\tOrdinal0 [0x00C7743B+1799227]\n\tOrdinal0 [0x00C7BB68+1817448]\n\tOrdinal0 [0x00C7BC55+1817685]\n\tOrdinal0 [0x00C85230+1856048]\n\tBaseThreadInitThunk [0x769FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\n\nScreenshot: file://C:\\Users\\GameMax\\.selene\\screenshots\\1659982206565\\1659982206566.png\nPageSource: file://C:\\Users\\GameMax\\.selene\\screenshots\\1659982206565\\1659982206566.html", "trace": "self = <selene.core.wait.Wait object at 0x000001DB6C592560>\nfn = <selene.core.wait.Command object at 0x000001DB6C593DF0>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x000001DB6C593DF0>\nentity = <selene.core.entity.Element object at 0x000001DB6C5924D0>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000001DB6C5924D0>\n\n>   self.wait.command('click', lambda element: element().click())\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:464: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x000001DB6C5924D0>\n\n    def __call__(self) -> WebElement:\n>       return self._locator()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x000001DB6C591C00>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\venv\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>           f'{self}.element({by})', lambda: self.driver.find_element(*by)\n        ),\n        self.config,\n    )\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:1540: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"148a831657cbe315547ec6667b465ba8\")>\nby = 'css selector', value = '[text=\"Sign in\"]'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"148a831657cbe315547ec6667b465ba8\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[text=\"Sign in\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DB6C591A20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[text=\"Sign in\"]\"}\nE         (Session info: chrome=104.0.5112.79)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00CD78B3+2193587]\nE       \tOrdinal0 [0x00C70681+1771137]\nE       \tOrdinal0 [0x00B841A8+803240]\nE       \tOrdinal0 [0x00BB24A0+992416]\nE       \tOrdinal0 [0x00BB273B+993083]\nE       \tOrdinal0 [0x00BDF7C2+1177538]\nE       \tOrdinal0 [0x00BCD7F4+1103860]\nE       \tOrdinal0 [0x00BDDAE2+1170146]\nE       \tOrdinal0 [0x00BCD5C6+1103302]\nE       \tOrdinal0 [0x00BA77E0+948192]\nE       \tOrdinal0 [0x00BA86E6+952038]\nE       \tGetHandleVerifier [0x00F80CB2+2738370]\nE       \tGetHandleVerifier [0x00F721B8+2678216]\nE       \tGetHandleVerifier [0x00D617AA+512954]\nE       \tGetHandleVerifier [0x00D60856+509030]\nE       \tOrdinal0 [0x00C7743B+1799227]\nE       \tOrdinal0 [0x00C7BB68+1817448]\nE       \tOrdinal0 [0x00C7BC55+1817685]\nE       \tOrdinal0 [0x00C85230+1856048]\nE       \tBaseThreadInitThunk [0x769FFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_github_sign_in():\n        browser.open('https://github.com/').driver.maximize_window()\n>       s('[text=\"Sign in\"]').click()\n\ntest_github_sign_in.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:464: in click\n    self.wait.command('click', lambda element: element().click())\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:136: in command\n    self.for_(Command(description, fn))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Wait object at 0x000001DB6C592560>\nfn = <selene.core.wait.Command object at 0x000001DB6C593DF0>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 4s, while waiting for:\nE                       browser.element(('css selector', '[text=\"Sign in\"]')).click\nE                       \nE                       Reason: NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[text=\"Sign in\"]\"}\nE                         (Session info: chrome=104.0.5112.79)\nE                       Stacktrace:\nE                       Backtrace:\nE                       \tOrdinal0 [0x00CD78B3+2193587]\nE                       \tOrdinal0 [0x00C70681+1771137]\nE                       \tOrdinal0 [0x00B841A8+803240]\nE                       \tOrdinal0 [0x00BB24A0+992416]\nE                       \tOrdinal0 [0x00BB273B+993083]\nE                       \tOrdinal0 [0x00BDF7C2+1177538]\nE                       \tOrdinal0 [0x00BCD7F4+1103860]\nE                       \tOrdinal0 [0x00BDDAE2+1170146]\nE                       \tOrdinal0 [0x00BCD5C6+1103302]\nE                       \tOrdinal0 [0x00BA77E0+948192]\nE                       \tOrdinal0 [0x00BA86E6+952038]\nE                       \tGetHandleVerifier [0x00F80CB2+2738370]\nE                       \tGetHandleVerifier [0x00F721B8+2678216]\nE                       \tGetHandleVerifier [0x00D617AA+512954]\nE                       \tGetHandleVerifier [0x00D60856+509030]\nE                       \tOrdinal0 [0x00C7743B+1799227]\nE                       \tOrdinal0 [0x00C7BB68+1817448]\nE                       \tOrdinal0 [0x00C7BC55+1817685]\nE                       \tOrdinal0 [0x00C85230+1856048]\nE                       \tBaseThreadInitThunk [0x769FFA29+25]\nE                       \tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\nE                       \tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\nE                       \nE                       Screenshot: file://C:\\Users\\GameMax\\.selene\\screenshots\\1659982206565\\1659982206566.png\nE                       PageSource: file://C:\\Users\\GameMax\\.selene\\screenshots\\1659982206565\\1659982206566.html\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:125: TimeoutException"}, "attachments": [{"name": "log", "source": "9d327368-c2ba-4769-a6ab-cd9b2bc1fede-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "aee4fbae-dabf-4587-8a22-0809cf216f2a-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "3d48ec10-b629-497c-919b-b47e5d8e82e7-attachment.txt", "type": "text/plain"}], "start": 1659982206574, "stop": 1659982216418, "uuid": "906f8cd4-96b1-4fe0-a50f-a6e6e166bbbf", "historyId": "3c818d282d22310c3833958b34c4a97c", "testCaseId": "7863e16f4d1164bc10040089b6b82f41", "fullName": "tests.test_github_sign_in#test_github_sign_in", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_github_sign_in"}, {"name": "host", "value": "DESKTOP-RDDJORK"}, {"name": "thread", "value": "3164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_github_sign_in"}]}